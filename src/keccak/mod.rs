use std::ops::{Index, IndexMut};

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct State {
    data: [[u64; 5]; 5],
}

impl State {
    pub fn new() -> Self {
        State { data: [[0; 5]; 5] }
    }

    pub fn to_vec(&self) -> Vec<u64> {
        self.data.iter().fold(vec![], |mut out, inner| {
            out.extend(inner);
            out
        })
    }
}

impl Index<usize> for State {
    type Output = [u64; 5];

    fn index(&self, index: usize) -> &Self::Output {
        &self.data[index]
    }
}

impl IndexMut<usize> for State {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.data[index]
    }
}

fn theta(state: &mut State) {
    let mut c = [0u64; 5];
    for i in 0..5 {
        c[i] = state[i][0];
        for j in 1..5 {
            c[i] ^= state[i][j];
        }
    }

    let mut d = [0u64; 5];
    for i in 0..5 {
        let l = if i == 0 { 4 } else { i - 1 };
        let r = (i + 1) % 5;
        d[i] = c[l] ^ (c[r].rotate_left(1))
    }

    for x in 0..5 {
        for y in 0..5 {
            state[x][y] ^= d[x];
        }
    }
}

fn rho(state: &mut State) {
    let (mut x, mut y) = (1, 0);
    for t in 0..24 {
        let offset = (((t + 1) * (t + 2)) / 2) % 64;
        state[x][y] = state[x][y].rotate_left(offset);
        (x, y) = (y, ((2 * x) + (3 * y)) % 5);
    }
}

fn pi(state: &mut State) {
    let mut out = State::new();
    for x in 0..5 {
        for y in 0..5 {
            out[x][y] = state[(x + 3 * y) % 5][x];
        }
    }
    *state = out;
}

fn chi(state: &mut State) {
    let mut out = State::new();
    for x in 0..5 {
        for y in 0..5 {
            out[x][y] = state[x][y] ^ (!state[(x + 1) % 5][y] & state[(x + 2) % 5][y]);
        }
    }
    *state = out;
}

fn lfsr(t: u8) -> bool {
    if t == 0 {
        return true;
    }
    let mut state = 0x01u8;
    for _ in 0..t {
        state = if state & 0x80 != 0 {
            (state << 1) ^ 0x71
        } else {
            state << 1
        };
    }
    state & 0x01 == 1
}

fn rc(round_num: u8) -> u64 {
    let mut out = 0;
    for j in 0..7 {
        if lfsr(j + 7 * round_num) {
            out |= 1 << ((1 << j) - 1)
        }
    }
    if round_num == 1 {
        println!("{:x}", out)
    }
    out
}

fn iota(round_num: u8, state: &mut State) {
    state[0][0] ^= rc(round_num);
}

/// Implements KECCAK-p, in place, on `state`.
pub fn keccak_p(state: &mut State) {
    for i in 0..24 {
        theta(state);
        rho(state);
        pi(state);
        chi(state);
        iota(i, state);
    }
}

#[cfg(test)]
mod test {
    use super::*;

    macro_rules! expl {
        ($( $val:literal )* ) => {
            {
              let bytes = vec![$($val),*];
              let mut state = State::new();
              let mut x = 0;
              let mut y = 0;
              for i in 0..25 {
                  let cursor = i * 8;
                  let u64slice = &bytes[cursor..cursor + 8];
                  let mut val = 0;
                  for j in 0..8 {
                      val |= u64slice[j] << (j * 8);
                  }
                  state[x][y] = val;
                  (x, y) = if x == 4 { (0, y + 1) } else { (x + 1, y) };
              }
              state
            }
        };
    }

    #[test]
    fn empty_theta() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
        ];
        let expected_state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
        ];
        theta(&mut state);
        assert_eq!(expected_state, state);
    }

    #[test]
    fn empty_rho() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x01 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x80
        ];
        let expected_state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x64 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x00 0x00 0x00
        ];
        rho(&mut state);
        assert_eq!(state, expected_state);
    }

    #[test]
    fn empty_pi() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x64 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x00 0x00 0x00
        ];
        let expected_state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x64 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00
        ];
        pi(&mut state);
        assert_eq!(state, expected_state);
    }

    #[test]
    fn empty_chi() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x64 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x18 0x00 0x00 0x00 0x00 0x00 0x00 0x00
        ];

        let expected_state = expl! [
            0x06 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x08 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x60 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0xC8 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x20
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xC0 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x8C 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x64 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x64 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00
            0x18 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40
            0x18 0x00 0x00 0x00 0x00 0x00 0x40 0x00
        ];
        chi(&mut state);
        assert_eq!(state, expected_state);
    }

    #[test]
    fn round_constants() {
        let rcs = vec![
            0x0000000000000001,
            0x0000000000008082,
            0x800000000000808a,
            0x8000000080008000,
            0x000000000000808b,
            0x0000000080000001,
            0x8000000080008081,
            0x8000000000008009,
            0x000000000000008a,
            0x0000000000000088,
            0x0000000080008009,
            0x000000008000000a,
            0x000000008000808b,
            0x800000000000008b,
            0x8000000000008089,
            0x8000000000008003,
            0x8000000000008002,
            0x8000000000000080,
            0x000000000000800a,
            0x800000008000000a,
            0x8000000080008081,
            0x8000000000008080,
            0x0000000080000001,
            0x8000000080008008,
        ];
        assert_eq!((0..24).into_iter().map(|r| rc(r)).collect::<Vec<_>>(), rcs);
    }

    #[test]
    fn empty_iota_rnd0() {
        let mut state = expl! [
            0x06 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x08 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x60 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0xC8 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x20
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xC0 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x8C 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x64 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x64 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00
            0x18 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40
            0x18 0x00 0x00 0x00 0x00 0x00 0x40 0x00
        ];
        let expected_state = expl![
            0x07 0x00 0x00 0x00 0x00 0x08 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x60 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x08 0x00 0x00 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x20 0x03 0x00 0x00 0x60 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0xC8 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x20
            0x00 0x00 0x00 0x00 0x00 0xC0 0x00 0x00 0x00 0x00 0xC8 0x00 0x00 0x00 0x00 0x20
            0x0C 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0xC0 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x8C 0x0C 0x00 0x00 0x00 0x00 0x00 0x00
            0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x64 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x18 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x80 0x00 0x64 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x40 0x06 0x00 0x40 0x00 0x00 0x00 0x00 0x00 0x00 0x40 0x00
            0x18 0x00 0x00 0x00 0x40 0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x40
            0x18 0x00 0x00 0x00 0x00 0x00 0x40 0x00
        ];
        iota(0, &mut state);
        assert_eq!(state, expected_state);
    }

    #[test]
    fn keccak_p_zero_vector() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
        ];

        let expected_state = expl![
            0xA6 0x9F 0x73 0xCC 0xA2 0x3A 0x9A 0xC5 0xC8 0xB5 0x67 0xDC 0x18 0x5A 0x75 0x6E
            0x97 0xC9 0x82 0x16 0x4F 0xE2 0x58 0x59 0xE0 0xD1 0xDC 0xC1 0x47 0x5C 0x80 0xA6
            0x15 0xB2 0x12 0x3A 0xF1 0xF5 0xF9 0x4C 0x11 0xE3 0xE9 0x40 0x2C 0x3A 0xC5 0x58
            0xF5 0x00 0x19 0x9D 0x95 0xB6 0xD3 0xE3 0x01 0x75 0x85 0x86 0x28 0x1D 0xCD 0x26
            0x36 0x4B 0xC5 0xB8 0xE7 0x8F 0x53 0xB8 0x23 0xDD 0xA7 0xF4 0xDE 0x9F 0xAD 0x00
            0xE6 0x7D 0xB7 0x2F 0x9F 0x9F 0xEA 0x0C 0xE3 0xC9 0xFE 0xF1 0x5A 0x76 0xAD 0xC5
            0x85 0xEB 0x2E 0xFD 0x11 0x87 0xFB 0x65 0xF9 0xC9 0xA2 0x73 0x31 0x51 0x67 0xE3
            0x14 0xFA 0x68 0xB6 0xA3 0x22 0xD4 0x07 0x01 0x5D 0x50 0x2A 0xCD 0xEC 0x8C 0x88
            0x5C 0x4F 0x77 0x84 0xCE 0xD0 0x46 0x09 0xBB 0x35 0x15 0x4A 0x96 0x48 0x4B 0x56
            0x25 0xD3 0x41 0x7C 0x88 0x60 0x7A 0xCD 0xE4 0xC2 0xC9 0x9B 0xAE 0x5E 0xDF 0x9E
            0xEA 0x2A 0xD0 0xFB 0x55 0xA2 0x26 0x18 0x9E 0x11 0xD2 0x49 0x60 0x43 0x3E 0x2B
            0x0E 0xE0 0x45 0xA4 0x73 0x09 0x97 0x76 0xDD 0x5D 0xE7 0x39 0xDB 0x9B 0xA8 0x19
            0xD5 0x4C 0xB9 0x03 0xA7 0xA5 0xD7 0xEE
        ];
        keccak_p(&mut state);
        assert_eq!(state, expected_state);
    }

    #[test]
    fn round1_iota() {
        let mut state = expl![
            0xDD 0x39 0x5A 0x01 0x02 0x2C 0xED 0x28 0x55 0x16 0x20 0x19 0xBD 0xA2 0x83 0x66
            0x46 0x26 0x21 0x23 0x02 0xAD 0x8E 0x7B 0xD6 0x19 0x56 0x15 0xBF 0xB2 0xCD 0xC8
            0x10 0x36 0x05 0x23 0x00 0xBB 0x22 0xF1 0x44 0xC2 0x19 0xE4 0x8A 0x57 0x18 0x06
            0x0D 0x00 0xC6 0xC9 0x8B 0xAC 0x0C 0x11 0x98 0xFC 0xD0 0x13 0xC8 0x04 0x01 0x06
            0xC4 0x00 0x58 0xE4 0x02 0x33 0x16 0xDD 0xB0 0x32 0xDF 0x10 0xC9 0xAC 0x0A 0x58
            0xE2 0xD0 0x8C 0x80 0x48 0xCF 0x03 0x80 0x68 0xE9 0x59 0x32 0x36 0x80 0x94 0x10
            0x98 0x02 0x80 0xAF 0xA8 0x2F 0x03 0x19 0xB2 0xCC 0xB0 0x08 0x2C 0x60 0xDC 0x00
            0x0C 0xA6 0x00 0xD5 0x5A 0x05 0x48 0x89 0xE4 0xE9 0x81 0xF7 0xF4 0x1C 0x28 0x05
            0x20 0x00 0x7A 0xCA 0xE6 0xF9 0xA3 0x85 0x58 0x79 0x92 0x19 0x1A 0x81 0x6B 0x28
            0xA4 0x40 0xEA 0x60 0x44 0x78 0x40 0x95 0x78 0x95 0x13 0x48 0xCC 0x01 0xA3 0xB8
            0x37 0xAD 0x5C 0x32 0x60 0x64 0x5E 0x20 0x34 0xCA 0x00 0xA2 0x06 0xD0 0x31 0xE0
            0x72 0xE0 0x77 0x10 0x60 0x25 0x5E 0x01 0xDB 0x0D 0x62 0xA0 0x41 0xB0 0x53 0x94
            0x64 0xE2 0x19 0x90 0x06 0x4B 0x20 0x55
        ];

        let expected_state = expl![
            0x5F 0xB9 0x5A 0x01 0x02 0x2C 0xED 0x28 0x55 0x16 0x20 0x19 0xBD 0xA2 0x83 0x66
            0x46 0x26 0x21 0x23 0x02 0xAD 0x8E 0x7B 0xD6 0x19 0x56 0x15 0xBF 0xB2 0xCD 0xC8
            0x10 0x36 0x05 0x23 0x00 0xBB 0x22 0xF1 0x44 0xC2 0x19 0xE4 0x8A 0x57 0x18 0x06
            0x0D 0x00 0xC6 0xC9 0x8B 0xAC 0x0C 0x11 0x98 0xFC 0xD0 0x13 0xC8 0x04 0x01 0x06
            0xC4 0x00 0x58 0xE4 0x02 0x33 0x16 0xDD 0xB0 0x32 0xDF 0x10 0xC9 0xAC 0x0A 0x58
            0xE2 0xD0 0x8C 0x80 0x48 0xCF 0x03 0x80 0x68 0xE9 0x59 0x32 0x36 0x80 0x94 0x10
            0x98 0x02 0x80 0xAF 0xA8 0x2F 0x03 0x19 0xB2 0xCC 0xB0 0x08 0x2C 0x60 0xDC 0x00
            0x0C 0xA6 0x00 0xD5 0x5A 0x05 0x48 0x89 0xE4 0xE9 0x81 0xF7 0xF4 0x1C 0x28 0x05
            0x20 0x00 0x7A 0xCA 0xE6 0xF9 0xA3 0x85 0x58 0x79 0x92 0x19 0x1A 0x81 0x6B 0x28
            0xA4 0x40 0xEA 0x60 0x44 0x78 0x40 0x95 0x78 0x95 0x13 0x48 0xCC 0x01 0xA3 0xB8
            0x37 0xAD 0x5C 0x32 0x60 0x64 0x5E 0x20 0x34 0xCA 0x00 0xA2 0x06 0xD0 0x31 0xE0
            0x72 0xE0 0x77 0x10 0x60 0x25 0x5E 0x01 0xDB 0x0D 0x62 0xA0 0x41 0xB0 0x53 0x94
            0x64 0xE2 0x19 0x90 0x06 0x4B 0x20 0x55
        ];

        iota(1, &mut state);
        assert_eq!(state, expected_state);
    }
}
