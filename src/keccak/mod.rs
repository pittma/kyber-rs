use std::ops::{Index, IndexMut};

mod step_mappings;

#[derive(Debug, Clone, PartialEq, Eq)]
pub struct State {
    data: [[u64; 5]; 5],
}

impl State {
    pub fn new() -> Self {
        State { data: [[0; 5]; 5] }
    }

    pub fn to_vec(&self) -> Vec<u64> {
        self.data.iter().fold(vec![], |mut out, inner| {
            out.extend(inner);
            out
        })
    }
}

impl Index<usize> for State {
    type Output = [u64; 5];

    fn index(&self, index: usize) -> &Self::Output {
        &self.data[index]
    }
}

impl IndexMut<usize> for State {
    fn index_mut(&mut self, index: usize) -> &mut Self::Output {
        &mut self.data[index]
    }
}

/// Implements KECCAK-p, in place, on `state`.
pub fn keccak_p(state: &mut State) {
    for i in 0..24 {
        step_mappings::theta(state);
        step_mappings::rho(state);
        step_mappings::pi(state);
        step_mappings::chi(state);
        step_mappings::iota(i, state);
    }
}

#[cfg(test)]
mod test {
    use super::*;

    macro_rules! expl {
        ($( $val:literal )* ) => {
            {
              let bytes = vec![$($val),*];
              let mut state = State::new();
              let mut x = 0;
              let mut y = 0;
              for i in 0..25 {
                  let cursor = i * 8;
                  let u64slice = &bytes[cursor..cursor + 8];
                  let mut val = 0;
                  for j in 0..8 {
                      val |= u64slice[j] << (j * 8);
                  }
                  state[x][y] = val;
                  (x, y) = if x == 4 { (0, y + 1) } else { (x + 1, y) };
              }
              state
            }
        };
    }

    #[test]
    fn keccak_p_padded_vector() {
        let mut state = expl![
            0x06 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x80 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
            0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
        ];

        let expected_state = expl![
            0xA6 0x9F 0x73 0xCC 0xA2 0x3A 0x9A 0xC5 0xC8 0xB5 0x67 0xDC 0x18 0x5A 0x75 0x6E
            0x97 0xC9 0x82 0x16 0x4F 0xE2 0x58 0x59 0xE0 0xD1 0xDC 0xC1 0x47 0x5C 0x80 0xA6
            0x15 0xB2 0x12 0x3A 0xF1 0xF5 0xF9 0x4C 0x11 0xE3 0xE9 0x40 0x2C 0x3A 0xC5 0x58
            0xF5 0x00 0x19 0x9D 0x95 0xB6 0xD3 0xE3 0x01 0x75 0x85 0x86 0x28 0x1D 0xCD 0x26
            0x36 0x4B 0xC5 0xB8 0xE7 0x8F 0x53 0xB8 0x23 0xDD 0xA7 0xF4 0xDE 0x9F 0xAD 0x00
            0xE6 0x7D 0xB7 0x2F 0x9F 0x9F 0xEA 0x0C 0xE3 0xC9 0xFE 0xF1 0x5A 0x76 0xAD 0xC5
            0x85 0xEB 0x2E 0xFD 0x11 0x87 0xFB 0x65 0xF9 0xC9 0xA2 0x73 0x31 0x51 0x67 0xE3
            0x14 0xFA 0x68 0xB6 0xA3 0x22 0xD4 0x07 0x01 0x5D 0x50 0x2A 0xCD 0xEC 0x8C 0x88
            0x5C 0x4F 0x77 0x84 0xCE 0xD0 0x46 0x09 0xBB 0x35 0x15 0x4A 0x96 0x48 0x4B 0x56
            0x25 0xD3 0x41 0x7C 0x88 0x60 0x7A 0xCD 0xE4 0xC2 0xC9 0x9B 0xAE 0x5E 0xDF 0x9E
            0xEA 0x2A 0xD0 0xFB 0x55 0xA2 0x26 0x18 0x9E 0x11 0xD2 0x49 0x60 0x43 0x3E 0x2B
            0x0E 0xE0 0x45 0xA4 0x73 0x09 0x97 0x76 0xDD 0x5D 0xE7 0x39 0xDB 0x9B 0xA8 0x19
            0xD5 0x4C 0xB9 0x03 0xA7 0xA5 0xD7 0xEE
        ];
        keccak_p(&mut state);
        assert_eq!(state, expected_state);
    }
}
